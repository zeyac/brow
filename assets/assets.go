// Code generated by go-bindata. DO NOT EDIT.
// sources:
// res/Brave.lnk (2.175kB)

package assets

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _braveLnk = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x94\x5d\x68\x23\x55\x14\xc7\x7f\xb1\x59\xd7\xfa\x62\x57\xab\xb8\xb2\xba\x59\xd8\x88\xb8\xcc\x98\x64\xf3\xd1\x04\xc4\x4d\x26\xad\x09\x8d\x76\x74\xcc\xda\x2d\x83\x6c\x36\x99\xa5\xb3\x6e\x3e\x3a\x19\x9b\xe6\xc1\x05\xd7\x87\x62\xb5\x22\x56\xb4\x08\xd2\x52\x04\x2b\xd6\x82\xfa\x24\x15\xf1\xd9\x07\xed\x83\x16\x51\xec\x87\xe0\x83\x05\x29\xe8\x93\xe0\x83\xcc\x4d\x5a\xd3\x36\x55\x10\x15\x91\x3d\x30\xf7\xde\x73\x3f\xce\xef\xcc\xff\x5c\x6e\x06\x70\x75\x5f\x87\x63\x9f\x88\x96\xbe\xb5\x33\xe0\x01\x6e\xf5\x97\x3f\x4c\x1f\x59\x71\xa5\x86\xaf\x7e\xee\xf4\xd9\xd5\x99\x87\x07\x3a\x57\x5c\x2f\x5d\xba\x4b\x6c\x74\xb1\xdb\x3e\x70\x75\x73\x5c\x5d\x1f\x58\xf6\x6c\xc6\xcc\xae\xb9\xaf\x6e\xe0\x94\xcf\xf7\xc6\x51\xee\x53\x62\x3a\xfb\xad\x80\x5f\xf4\x93\xea\xc4\x89\x2e\x12\x8f\xc6\xcf\xf6\x6a\x57\xfc\x90\xa1\x13\x37\x5b\x1f\x3b\xf3\xce\x27\x03\x95\x57\xdc\xc0\xf5\x7b\x22\x0c\xbd\xf8\x20\x09\x2c\x72\x8c\x62\xa0\x51\xe6\x22\x36\x35\x72\x58\x18\xc0\xed\x2d\x8c\xe7\xb7\x19\xd2\x7e\xc6\x94\x60\x8c\x08\x46\xc7\x1e\xc6\xd9\x6f\x5f\x6d\x61\x48\x62\x5c\xa6\x46\x15\x03\x4b\x30\xce\xef\x62\xc4\x55\x35\x93\x56\x1c\x46\xaa\x0d\xc3\x6a\xcb\x58\x78\x62\x9a\x38\x15\x2a\x5c\xc6\x24\x4f\x0e\x1b\x93\x32\x25\x11\x5f\x27\x80\x23\xf9\xb3\xea\x21\xb7\x87\x0b\x56\x6e\xd4\x90\x8d\x31\x83\x64\x1b\x9d\xaa\x6d\xe3\xbf\x73\x55\x76\x5d\xd8\xf9\x07\x19\x83\xb1\xa6\x3e\xf0\x24\x70\xac\x59\x4c\xa7\x0f\x35\xcf\x5c\x02\x8e\x36\x63\x29\x4b\xc7\xf4\x2e\x20\x69\x9e\x1c\x79\xca\xf0\x28\x28\x31\x3d\xe1\xe4\xa1\x95\x2f\xda\xb5\x9c\x65\x34\x3c\x29\x61\x95\x6b\x55\xc3\xd2\xe3\x95\xca\x65\x33\x9f\xb3\xcd\x72\x49\xff\x3d\x5f\x6e\x26\x4e\x9e\x3c\x3f\x50\x10\xe2\x79\x58\xc7\x43\x9a\x12\xb6\xf0\x4b\x18\xd8\xc4\x90\x91\xd1\x77\xb5\x07\x17\x59\xff\x83\xe2\xe8\x07\x88\xaa\xb3\x5f\x8c\x7b\x51\x88\xfd\xed\xa4\xe0\x3f\x12\xb5\x5d\xfe\xdd\x1d\x70\x18\x66\xbd\x5a\xbd\x6a\x1b\xc5\xa4\x65\x8e\x1a\xde\xbf\x52\xa4\xff\x81\x79\xd1\xa8\x53\x15\xb7\xaa\x48\x12\x0b\x53\x68\xe5\xfd\x57\x2a\x71\xcd\xfe\x2b\x76\xbe\xf1\x7c\xcd\x0e\x36\xfd\x4a\x5e\x1a\xce\x15\x8c\xea\xf6\x7a\x61\x71\xd1\xae\xff\xb4\xd0\xfb\xf2\x33\xdf\xbf\xfd\xf5\xfc\xb8\x7b\x32\x78\x6a\xee\xe4\xd3\x9b\x47\x5e\xbf\xe9\xb1\xf7\x3b\x6e\x9c\xe8\xff\xb3\xf5\x07\x5c\xd0\x09\xb3\xcf\x01\x7e\x4d\xd5\xbe\x9b\x18\xec\xfb\x28\xd3\xa3\x2c\xfd\x7a\xcb\xd4\xdd\xd3\xc5\xcf\x8a\x80\xf3\x1c\x73\x1c\x70\x5e\x67\x0d\x09\x3f\x12\x21\x24\x02\x62\x74\x9a\x08\x51\x82\x04\x89\x12\x25\x4c\x0f\x61\xb1\x16\x25\x84\x8f\xa0\xf0\x03\xf4\x88\x9d\x21\x82\xf8\xf0\xe1\x27\x22\x4e\x84\x45\xb4\xc6\x4c\xc3\x46\x9a\x89\x64\xef\xc9\xcc\xd4\x67\xa2\xfd\xf3\xcb\x1b\x5f\x48\x1b\x5f\xfe\x9c\x05\x0e\x6d\x27\x72\x02\x5a\x6e\xba\x4c\x1f\x09\xce\xf1\x08\x11\xc2\x28\xf4\x92\x65\x00\x95\x38\x19\x86\x88\x90\x20\xc5\x43\x3c\x8e\x4a\x80\xd3\x0c\x71\x8e\x41\xd2\x3b\x0a\x47\x9b\xc0\xf7\x6e\x2b\x26\xdf\x9d\xac\xa4\xde\x4a\x9d\x91\xdf\xbc\x7f\xec\x85\x3b\x81\x61\x67\x43\x0a\x58\x5b\xbd\xe3\xc7\xf1\x5f\xb6\x52\xaf\x2d\x7e\xd3\x7f\xf8\xd3\x2b\xbe\xd6\x12\xfd\x16\x00\x00\xff\xff\xa5\x6f\x5f\x91\x7f\x08\x00\x00")

func braveLnkBytes() ([]byte, error) {
	return bindataRead(
		_braveLnk,
		"Brave.lnk",
	)
}

func braveLnk() (*asset, error) {
	bytes, err := braveLnkBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "Brave.lnk", size: 2175, mode: os.FileMode(0666), modTime: time.Unix(1586751177, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x31, 0x80, 0xb5, 0x7c, 0x5f, 0xe9, 0x11, 0x38, 0xe0, 0x80, 0x1f, 0x88, 0x97, 0x72, 0xeb, 0xaf, 0xaf, 0xd5, 0x42, 0x1d, 0xce, 0xa6, 0x97, 0xd8, 0xce, 0x1, 0xbb, 0x57, 0x5a, 0xe6, 0xa7, 0x9}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"Brave.lnk": braveLnk,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"Brave.lnk": {braveLnk, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
